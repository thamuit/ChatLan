/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lanchatapp.gui;

import lanchatapp.FileTypeFilter;
import com.googlecode.javacv.CanvasFrame;
import com.googlecode.javacv.OpenCVFrameGrabber;
import com.googlecode.javacv.cpp.opencv_core;
import com.googlecode.javacv.cpp.opencv_highgui;
import static com.googlecode.javacv.cpp.opencv_highgui.cvSaveImage;
import com.sun.glass.events.KeyEvent;
import com.sun.org.apache.xml.internal.serialize.LineSeparator;
import java.awt.Color;
import com.sun.org.apache.xml.internal.serialize.LineSeparator;
import java.awt.Color;
import static java.awt.Component.CENTER_ALIGNMENT;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.io.File;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ScrollPaneConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import lanchatapp.ListEntry;
import lanchatapp.ListEntryCellRenderer;
import lanchatapp.network.MessageListener;
import lanchatapp.network.MessageTransmitter;
import lanchatapp.network.WriteableGUI;
import lanchatapp.database.*;
import lanchatapp.network.CallListener;
import lanchatapp.network.CallTransmitter;
import lanchatapp.network.FileListener;
import lanchatapp.network.FileTransmitter;
/**
 *
 * @author Phu
 */
public class MainScreen extends javax.swing.JFrame implements WriteableGUI {

    /**
     * Creates new form MainScreen
     */
    private volatile boolean isProcessCamera = false;
    private CanvasFrame frame = new CanvasFrame("Webcam"); // tạo canvas frame
    public boolean isLoggedin;
    private long time;

    public MainScreen() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/image/rabbit.png")));
        connectDB();
        addCOmponent();
        getSltItem();
        frame.setVisible(false);
        frame.setDefaultCloseOperation(HIDE_ON_CLOSE);
        closeAction();
        this.setLocationRelativeTo(null);
        time = System.nanoTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtIP = new javax.swing.JTextField();
        jtTargetPort = new javax.swing.JTextField();
        jtMessage = new javax.swing.JTextField();
        jbListen = new javax.swing.JButton();
        jtReceiveBox = new javax.swing.JTextField();
        jbFile = new javax.swing.JButton();
        jbCamera = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlChatBox = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtNamelist = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jbGetIP = new javax.swing.JButton();
        jbHistory = new javax.swing.JButton();
        jtUsername = new javax.swing.JLabel();
        jbTracking = new javax.swing.JButton();
        btncall = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ezzyMessenger");

        jtIP.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jtIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtIPActionPerformed(evt);
            }
        });

        jtTargetPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtTargetPortActionPerformed(evt);
            }
        });

        jtMessage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jtMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtMessageActionPerformed(evt);
            }
        });
        jtMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtMessageKeyPressed(evt);
            }
        });

        jbListen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/connect.png"))); // NOI18N
        jbListen.setText("Kết nối");
        jbListen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbListenActionPerformed(evt);
            }
        });

        jbFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/clip.png"))); // NOI18N
        jbFile.setText("Gửi ảnh");
        jbFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFileActionPerformed(evt);
            }
        });

        jbCamera.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/camera.png"))); // NOI18N
        jbCamera.setText("Camera");
        jbCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCameraActionPerformed(evt);
            }
        });

        jLabel1.setText("Port");

        jLabel2.setText("Port đích");

        jLabel3.setText("Địa chỉ IP");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        pnlChatBox.setBackground(new java.awt.Color(255, 255, 255));
        pnlChatBox.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout pnlChatBoxLayout = new javax.swing.GroupLayout(pnlChatBox);
        pnlChatBox.setLayout(pnlChatBoxLayout);
        pnlChatBoxLayout.setHorizontalGroup(
            pnlChatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 580, Short.MAX_VALUE)
        );
        pnlChatBoxLayout.setVerticalGroup(
            pnlChatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 334, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(pnlChatBox);

        jtNamelist.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane3.setViewportView(jtNamelist);

        jLabel4.setText("Danh sách liên lạc");

        jbGetIP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ip.png"))); // NOI18N
        jbGetIP.setText(" IP");
        jbGetIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGetIPActionPerformed(evt);
            }
        });

        jbHistory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/history.png"))); // NOI18N
        jbHistory.setText("Lịch sử");
        jbHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbHistoryActionPerformed(evt);
            }
        });

        jtUsername.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jtUsername.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/user2.png"))); // NOI18N
        jtUsername.setText("Tên người dùng");

        jbTracking.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/track.png"))); // NOI18N
        jbTracking.setText("Thời gian truy cập");
        jbTracking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbTrackingActionPerformed(evt);
            }
        });

        btncall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/phone.png"))); // NOI18N
        btncall.setText("Gọi thoại");
        btncall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncallActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jtUsername))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addComponent(jbHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(49, 49, 49))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jbTracking, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addGap(24, 24, 24)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtReceiveBox, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                    .addComponent(jtTargetPort))
                                .addGap(110, 110, 110)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jbListen)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jbGetIP))
                                    .addComponent(jtIP, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jtMessage)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btncall)
                        .addGap(18, 18, 18)
                        .addComponent(jbCamera)
                        .addGap(19, 19, 19)
                        .addComponent(jbFile)))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jtReceiveBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jtUsername)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtTargetPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbGetIP)
                            .addComponent(jbListen)))
                    .addComponent(jbHistory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbCamera)
                        .addComponent(btncall)
                        .addComponent(jbTracking))
                    .addComponent(jbFile))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtIPActionPerformed
    MessageListener listener;
    private void jbListenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbListenActionPerformed
        // khởi tạo message listener thread 
        listener = new MessageListener(this, Integer.parseInt(jtReceiveBox.getText()));
        listener.start();
        
        String desktop= System.getProperty("user.home") + "\\Desktop"; 
        FileListener receiveFile = new FileListener(1996, desktop + "\\received.jpg");
        receiveFile.start();
        
        CallListener call = new CallListener(Integer.parseInt(jtReceiveBox.getText()), jtIP.getText());
        call.init_audio();
        //if(call.calling){
        //  receive_call rc = new receive_call();
        //rc.setVisible(true);
        // }

    }//GEN-LAST:event_jbListenActionPerformed


    private void jtMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtMessageKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            MessageTransmitter transmitter = new MessageTransmitter(jtMessage.getText(), jtIP.getText(), Integer.parseInt(jtTargetPort.getText()));
            CreateBoxMessage(this.jtMessage.getText(), true);
            inserChatDatabase("chat", jtMessage.getText());
            jtMessage.setText("");
            transmitter.start();
        }
    }//GEN-LAST:event_jtMessageKeyPressed

    private void jtMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtMessageActionPerformed

    private void jtTargetPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtTargetPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtTargetPortActionPerformed

    // ấn chụp camera
    private void jbCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCameraActionPerformed
        //frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
        frame.setVisible(true);
        opencv_highgui.CvCapture capture;
        if (jbCamera.isSelected()) {
            isProcessCamera = true;
            Thread webcam = new Thread() {
                public void run() {
                    opencv_highgui.CvCapture capture = opencv_highgui.cvCreateCameraCapture(0);  // open webcam từ máy tính
                    opencv_highgui.cvSetCaptureProperty(capture, opencv_highgui.CV_CAP_PROP_FRAME_HEIGHT, 720); // set widtj
                    opencv_highgui.cvSetCaptureProperty(capture, opencv_highgui.CV_CAP_PROP_FRAME_WIDTH, 720); // set hight

                    opencv_core.IplImage grabbedImage = opencv_highgui.cvQueryFrame(capture);

                    // show image liên tục trên webcam
                    while (frame.isVisible() && (grabbedImage = opencv_highgui.cvQueryFrame(capture)) != null && isProcessCamera) {
                        frame.showImage(grabbedImage);
                    };
                }

            };
            webcam.start();
            jbCamera.setText("Capture");

        } else {
            isProcessCamera = false;
            frame.setVisible(false);
            OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(0); // 0 là default webcam
            try {
                grabber.start();
                opencv_core.IplImage img = grabber.grab();
                if (img != null) { // save image
                    JFileChooser sendImage = new JFileChooser();

                    sendImage.setDialogTitle("Save image");
                    sendImage.setFileFilter(new FileTypeFilter(".jpg", "JPG Image"));
                    int returnValue = sendImage.showSaveDialog(this);
                    if (returnValue == JFileChooser.APPROVE_OPTION) {
                        String fileName = sendImage.getSelectedFile().getName();
                        //FileTransmitter sendFile = new FileTransmitter(jtIP.getText(), 1996, fileName);
                        cvSaveImage(sendImage.getCurrentDirectory() + "\\" + fileName + ".jpg", img);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            jbCamera.setText("Camera");

        }
    }//GEN-LAST:event_jbCameraActionPerformed

    private void jbFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFileActionPerformed
        JFileChooser sendImage = new JFileChooser();
        sendImage.setDialogTitle("Open rar file");
        sendImage.setFileFilter(new FileTypeFilter(".jpg", "Image file"));
        int returnValue = sendImage.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            //  FileListener
            
            String fileNameP = sendImage.getSelectedFile().getAbsolutePath();
            String fileName = sendImage.getSelectedFile().getName();
            
            FileTransmitter sendFile = new FileTransmitter(jtIP.getText(), 1996, fileNameP);
            CreateBoxMessage(fileName, true);
            MessageTransmitter transmitter = new MessageTransmitter("Đã nhận file "+fileName, jtIP.getText(), Integer.parseInt(jtTargetPort.getText()));
            transmitter.start();
        }
    }//GEN-LAST:event_jbFileActionPerformed

    private void jbGetIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGetIPActionPerformed
        try {
            InetAddress addr = InetAddress.getLocalHost();
            String ipAddress = addr.getHostAddress();
            String hostName = addr.getHostName();

            JOptionPane.showMessageDialog(this, "Địa chỉ IP : " + ipAddress + "\n Host name : " + hostName);
        } catch (UnknownHostException ex) {
            JOptionPane.showMessageDialog(null, "Không nhận biết được host");
        }
    }//GEN-LAST:event_jbGetIPActionPerformed

    private void jbHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbHistoryActionPerformed
        History his = new History();
        his.setVisible(true);
        String query = "Select *from chat where username = '" + this.jtUsername.getText() + "'";
        try {
            Statement statement = conn.createStatement();
            PreparedStatement preStatement = conn.prepareStatement(query);
            ResultSet result = preStatement.executeQuery();
            int i = 1;
            DefaultTableModel model = (DefaultTableModel) his.jtChatTable.getModel();
            while (result.next()) {
                if (result.getString("username").equals(jtUsername.getText())) {
                    String chat = result.getString("chat");
                    model.addRow(new Object[]{i, chat});
                    i++;
                }
            }
            statement.close();
        } catch (SQLException ex) {
            Logger.getLogger(Database.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbHistoryActionPerformed

    private void jbTrackingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbTrackingActionPerformed
        UserTracking usrTrack = new UserTracking();
        usrTrack.setVisible(true);
        String query = "Select *from usertracking where username = '" + this.jtUsername.getText() + "'";
        try {
            Statement statement = conn.createStatement();
            PreparedStatement preStatement = conn.prepareStatement(query);
            ResultSet result = preStatement.executeQuery();
            int i = 1;
            DefaultTableModel model = (DefaultTableModel) usrTrack.jtUsrTrack.getModel();
            while (result.next()) {
                if (result.getString("username").equals(jtUsername.getText())) {
                    String chat = result.getString("time");
                    model.addRow(new Object[]{i, chat});
                    i++;
                }
            }
            statement.close();
        } catch (SQLException ex) {
            Logger.getLogger(Database.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbTrackingActionPerformed

    private void btncallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncallActionPerformed
        //call_voice call = new call_voice(Integer.parseInt(jtTargetPort.getText()),jbGetIP.getText());
        CallTransmitter calltransmitter = new CallTransmitter(Integer.parseInt(jtTargetPort.getText()), jtIP.getText());
        calltransmitter.init_audio();
        call_voice call = new call_voice();
        call.setVisible(true);
    }//GEN-LAST:event_btncallActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btncall;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToggleButton jbCamera;
    private javax.swing.JButton jbFile;
    private javax.swing.JButton jbGetIP;
    private javax.swing.JButton jbHistory;
    private javax.swing.JButton jbListen;
    private javax.swing.JButton jbTracking;
    private javax.swing.JTextField jtIP;
    private javax.swing.JTextField jtMessage;
    private javax.swing.JList<String> jtNamelist;
    public javax.swing.JTextField jtReceiveBox;
    private javax.swing.JTextField jtTargetPort;
    public javax.swing.JLabel jtUsername;
    private javax.swing.JPanel pnlChatBox;
    // End of variables declaration//GEN-END:variables
    SimpleAttributeSet set = new SimpleAttributeSet();
    int numPort = 0; // số lượng port;
    boolean likeClick = false;
    private Connection conn;
    private String url = "jdbc:mysql://sql12.freemysqlhosting.net/sql12177339?characterEncoding=UTF-8";
    private String usr = "sql12177339";
    private String pw = "iDjDWv2pYl";

    public int heightOfPanels = 0;

    public void CreateBoxMessage(String message, Boolean isRight) {
        if (heightOfPanels + 100 > pnlChatBox.getSize().height) {
            pnlChatBox.setPreferredSize(
                    new Dimension(pnlChatBox.getSize().width, heightOfPanels + 100)
            );

            pnlChatBox.getAutoscrolls();
            //JOptionPane.showMessageDialog(null,pnlChatBox.getAutoscrolls());
        }

        JPanel panel = new JPanel();
        JLabel text = new JLabel(message);

        Font font = new Font("Segoe UI Semilight", Font.PLAIN, 14);
        text.setFont(font);
        panel.add(text, CENTER_ALIGNMENT);

        //get Width, height of message
        AffineTransform affineTransform = new AffineTransform();
        FontRenderContext frc = new FontRenderContext(affineTransform, true, true);
        int textWidth = (int) (font.getStringBounds(message, frc).getWidth());
        int textHeight = (int) (font.getStringBounds(message, frc).getHeight());
        //set size for panel
        int widthPanel = textWidth + 20;
        int heightPanel = textHeight + 20;
        panel.setSize(widthPanel, heightPanel);
        //set location for panel
        int x = 0;
        if (isRight) {
            x = pnlChatBox.getSize().width - widthPanel - 80;
        } else {
            x = 50;
        }
        heightOfPanels += 20;
        panel.setLocation(x, heightOfPanels);
        heightOfPanels += heightPanel;
        //set backgrund
        if (isRight) {
            panel.setBackground(new Color(159, 255, 169));
        } else {
            panel.setBackground(new Color(200, 200, 200));
        }

        //add to pnlChatBox and update content
        pnlChatBox.add(panel);
        pnlChatBox.revalidate();
        pnlChatBox.repaint();
    }

    public void connectDB() {
        try {
            conn = DriverManager.getConnection(url, usr, pw);
            System.out.println("Kết nối thành công");
        } catch (SQLException ex) {
//            JOptionPane.showMessageDialog(this, "Lỗi", "Không thể kết nối với Server\n Kiểm tra kết nối Intenet", ERROR);
            Logger.getLogger(Database.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // thêm vào danh sách liên lạc
    public void addCOmponent() {
        String query = "SELECT *FROM user";
        DefaultListModel dlm = new DefaultListModel();
        try {
            Statement statement = conn.createStatement();
            PreparedStatement preStatement = conn.prepareStatement(query);
            ResultSet result = preStatement.executeQuery();
            while (result.next()) {
                dlm.addElement(new ListEntry(result.getString("name"), new javax.swing.ImageIcon(getClass().getResource("/image/user.png"))));
                numPort++;
            }
            jtNamelist.setModel(dlm);
            jtNamelist.setCellRenderer(new ListEntryCellRenderer());
        } catch (SQLException ex) {
            Logger.getLogger(Database.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Hàm chèn chat vào database
    public void inserChatDatabase(String table, String chat) {
        String query = "INSERT INTO " + table + " values ('" + this.jtUsername.getText() + "','" + chat + "')";
        try {
            Statement statement = conn.createStatement();
            statement.execute(query);
            statement.close();
        } catch (SQLException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // hàm trả về danh sách các port
    public int[] getPortList() {
        int[] portList = new int[numPort];
        String query = "SELECT *FROM user";
        try {
            Statement statement = conn.createStatement();
            PreparedStatement preStatement = conn.prepareStatement(query);
            ResultSet result = preStatement.executeQuery();
            int i = 0;
            while (result.next()) {
                portList[i] = result.getInt("port");
                i++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(Database.class.getName()).log(Level.SEVERE, null, ex);
        }
        return portList;
    }

    // set port của Receive port
    public void getSltItem() {
        int[] a = new int[numPort];
        a = getPortList();
        int x;
        ListSelectionListener ls = new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent lse) {
                int[] a = new int[numPort];
                a = getPortList();
                jtTargetPort.setText(a[jtNamelist.getSelectedIndex()] + "");
            }
        };
        jtNamelist.addListSelectionListener(ls);

    }

    public void valueChanged(ListSelectionEvent lse) {
        System.out.println(jtNamelist.getSelectedIndex());
    }

    // hàm thông báo cho người dùng đóng
    public void closeAction() {
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                long timeStop = (int) ((System.nanoTime() - time) / Math.pow(10, 9));
                String time = lanchatapp.TimeConvert.secToH(timeStop) + "";
                inserChatDatabase("usertracking",time);
                System.exit(0);
            }
        }
        );
    }

    // Hàm setText cho receive port
    public void setText(String s) {
        jtReceiveBox.setText(s);
    }

    // Gửi điF
    @Override
    public void write(String s) {
        CreateBoxMessage(s, false);
    }

    public static void main(String args[]) {
       try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            //</editor-fold>
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(call_voice.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(call_voice.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(call_voice.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(call_voice.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

}
