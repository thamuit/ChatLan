/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lanchatapp.gui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import lanchatapp.database.*;

/**
 *
 * @author Phu
 */
public class SignUp extends javax.swing.JFrame {

    /**
     * Creates new form SignUp
     */
    Database db = new Database();

    public SignUp() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/image/rabbit.png")));
        db.createConnection();
        this.setResizable(false);
        //this.setLocationRelativeTo(null);
        this.setSize(new Dimension(800,530));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtUsername = new javax.swing.JTextField();
        jtName = new javax.swing.JTextField();
        jtEmail = new javax.swing.JTextField();
        jtPort = new javax.swing.JTextField();
        jtPassword = new javax.swing.JPasswordField();
        jtConfirm = new javax.swing.JPasswordField();
        jtClear = new javax.swing.JButton();
        jtSignUp = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);
        getContentPane().add(jtUsername);
        jtUsername.setBounds(200, 90, 180, 30);
        getContentPane().add(jtName);
        jtName.setBounds(200, 320, 279, 30);
        getContentPane().add(jtEmail);
        jtEmail.setBounds(200, 390, 279, 30);

        jtPort.setToolTipText("");
        getContentPane().add(jtPort);
        jtPort.setBounds(450, 90, 132, 30);
        getContentPane().add(jtPassword);
        jtPassword.setBounds(200, 160, 277, 30);
        getContentPane().add(jtConfirm);
        jtConfirm.setBounds(200, 240, 277, 30);

        jtClear.setText("Thoát");
        jtClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtClearActionPerformed(evt);
            }
        });
        getContentPane().add(jtClear);
        jtClear.setBounds(530, 450, 70, 23);

        jtSignUp.setText("Đăng kí");
        jtSignUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtSignUpActionPerformed(evt);
            }
        });
        getContentPane().add(jtSignUp);
        jtSignUp.setBounds(430, 450, 90, 23);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Signup.jpg"))); // NOI18N
        getContentPane().add(jLabel8);
        jLabel8.setBounds(0, 0, 800, 500);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Hành dộng nút Clear
    private void jtClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtClearActionPerformed
        dispose();
    }//GEN-LAST:event_jtClearActionPerformed
    // Hành động nút Signup
    private void jtSignUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtSignUpActionPerformed
        int port = getPort();
        if (getUsername().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bạn phải nhập tên tài khoản", "Lỗi", JOptionPane.ERROR_MESSAGE);
            jtUsername.requestFocus();
        } else if (jtPort.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bạn phải nhập port", "Lỗi", JOptionPane.ERROR_MESSAGE);
            jtPort.requestFocus();
        } else 
            if(port == 0){
            jtPort.setText(null);
            jtPort.requestFocus();
            }
        else if (getPassword().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bạn phải nhập vào mật khẩu", "Lỗi", JOptionPane.WARNING_MESSAGE);
            jtPassword.requestFocus();
        } else if (!getPassword().equals(jtConfirm.getText())) {
            JOptionPane.showMessageDialog(this, "Mật khẩu không khớp", "Lỗi", JOptionPane.ERROR_MESSAGE);
            jtPassword.setText(null);
            jtConfirm.setText(null);
            jtPassword.requestFocus();
        } else 
        if(db.checkSignUp(getUsername(), port)){
            JOptionPane.showMessageDialog(this, "Tài khoản hoặc port đã tồn tại", "Lỗi", JOptionPane.WARNING_MESSAGE);
            jtUsername.setText(null);
            jtPort.setText(null);
        }else {
            try {
                db.insertUser(getUsername(), getPort(), getPassword(), getName(), getEmail());
                JOptionPane.showMessageDialog(this, "Tạo tài khoản thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                this.setVisible(false);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Không thể tạo tài khoản", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_jtSignUpActionPerformed
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            //</editor-fold>
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(call_voice.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(call_voice.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(call_voice.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(call_voice.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SignUp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel8;
    private javax.swing.JButton jtClear;
    private javax.swing.JPasswordField jtConfirm;
    private javax.swing.JTextField jtEmail;
    private javax.swing.JTextField jtName;
    private javax.swing.JPasswordField jtPassword;
    private javax.swing.JTextField jtPort;
    private javax.swing.JButton jtSignUp;
    private javax.swing.JTextField jtUsername;
    // End of variables declaration//GEN-END:variables

    public String getUsername() {
        return jtUsername.getText();
    }

    public String getPassword() {
        return jtPassword.getText();
    }

    public String getName() {
        return jtName.getText();
    }

    public String getEmail() {
        return jtEmail.getText();
    }

    public int getPort() {
        int port = 0;
        try {
            port = Integer.parseInt(jtPort.getText());
            return port;
        } catch (java.lang.NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Port phải là số nguyên", "Lỗi", JOptionPane.WARNING_MESSAGE);
        }
        return port;
    }
}
